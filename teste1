<!DOCTYPE html>
<html lang="pt-BR">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Maestro Food Dashboard - COM UPLOAD</title>
    <script src="https://cdn.jsdelivr.net/npm/chart.js"></script>
    <script src="https://cdn.jsdelivr.net/npm/@supabase/supabase-js@2"></script>
    <script src="https://cdnjs.cloudflare.com/ajax/libs/xlsx/0.18.5/xlsx.full.min.js"></script>
    <style>
        * {
            margin: 0;
            padding: 0;
            box-sizing: border-box;
        }

        body {
            font-family: 'Segoe UI', Tahoma, Geneva, Verdana, sans-serif;
            background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);
            min-height: 100vh;
            padding: 20px;
        }

        .dashboard-container {
            max-width: 1400px;
            margin: 0 auto;
        }

        .header {
            text-align: center;
            margin-bottom: 30px;
        }

        .header h1 {
            color: white;
            font-size: 2.5rem;
            margin-bottom: 20px;
            text-shadow: 0 2px 4px rgba(0,0,0,0.3);
        }

        .project-badge {
            background: linear-gradient(135deg, #28a745 0%, #20c997 100%);
            color: white;
            padding: 8px 16px;
            border-radius: 20px;
            font-size: 0.8rem;
            font-weight: bold;
            box-shadow: 0 4px 15px rgba(40, 167, 69, 0.3);
            display: inline-block;
            margin: 5px;
        }

        .status-container {
            background: rgba(255, 255, 255, 0.1);
            backdrop-filter: blur(10px);
            border-radius: 15px;
            padding: 20px;
            margin-bottom: 30px;
            border: 1px solid rgba(255, 255, 255, 0.2);
        }

        .status-grid {
            display: grid;
            grid-template-columns: repeat(auto-fit, minmax(200px, 1fr));
            gap: 15px;
            text-align: center;
        }

        .status-item {
            color: white;
        }

        .status-label {
            font-size: 0.9rem;
            opacity: 0.8;
            margin-bottom: 5px;
        }

        .status-value {
            font-size: 1.4rem;
            font-weight: bold;
        }

        .loading-overlay {
            position: fixed;
            top: 0;
            left: 0;
            width: 100%;
            height: 100%;
            background: rgba(0, 0, 0, 0.8);
            display: flex;
            justify-content: center;
            align-items: center;
            z-index: 9999;
        }

        .loading-content {
            background: white;
            padding: 40px;
            border-radius: 20px;
            text-align: center;
            box-shadow: 0 20px 60px rgba(0, 0, 0, 0.3);
            max-width: 400px;
            width: 90%;
        }

        .loading-spinner {
            width: 60px;
            height: 60px;
            border: 4px solid #f3f3f3;
            border-top: 4px solid #28a745;
            border-radius: 50%;
            animation: spin 1s linear infinite;
            margin: 0 auto 20px;
        }

        @keyframes spin {
            0% { transform: rotate(0deg); }
            100% { transform: rotate(360deg); }
        }

        .progress-bar {
            width: 100%;
            height: 20px;
            background: #f0f0f0;
            border-radius: 10px;
            overflow: hidden;
            margin: 20px 0;
        }

        .progress-fill {
            height: 100%;
            background: linear-gradient(90deg, #28a745, #20c997);
            width: 0%;
            transition: width 0.3s ease;
        }

        .main-content {
            background: white;
            border-radius: 20px;
            box-shadow: 0 20px 60px rgba(0, 0, 0, 0.1);
            overflow: hidden;
        }

        .content-header {
            background: linear-gradient(135deg, #28a745 0%, #20c997 100%);
            color: white;
            padding: 30px;
            text-align: center;
        }

        .content-body {
            padding: 30px;
        }

        /* SISTEMA DE ABAS */
        .tabs-container {
            margin-bottom: 30px;
        }

        .tabs-nav {
            display: flex;
            background: #f8f9fa;
            border-radius: 10px;
            padding: 5px;
            margin-bottom: 25px;
            box-shadow: 0 2px 10px rgba(0, 0, 0, 0.1);
        }

        .tab-button {
            flex: 1;
            padding: 15px 20px;
            border: none;
            background: transparent;
            border-radius: 8px;
            cursor: pointer;
            font-weight: 600;
            transition: all 0.3s ease;
            display: flex;
            align-items: center;
            justify-content: center;
            gap: 8px;
        }

        .tab-button.active {
            background: linear-gradient(135deg, #28a745, #20c997);
            color: white;
            box-shadow: 0 4px 15px rgba(40, 167, 69, 0.3);
        }

        .tab-button:hover:not(.active) {
            background: #e9ecef;
        }

        .tab-content {
            display: none;
        }

        .tab-content.active {
            display: block;
        }

        /* UPLOAD DE DADOS */
        .upload-section {
            background: #f8f9fa;
            padding: 30px;
            border-radius: 15px;
            margin-bottom: 30px;
            box-shadow: 0 5px 15px rgba(0, 0, 0, 0.08);
            text-align: center;
        }

        .upload-area {
            border: 3px dashed #28a745;
            border-radius: 15px;
            padding: 40px;
            margin: 20px 0;
            background: white;
            transition: all 0.3s ease;
            cursor: pointer;
        }

        .upload-area:hover {
            border-color: #20c997;
            background: #f8fff9;
        }

        .upload-area.dragover {
            border-color: #20c997;
            background: #e8f5e8;
            transform: scale(1.02);
        }

        .upload-icon {
            font-size: 3rem;
            color: #28a745;
            margin-bottom: 15px;
        }

        .upload-text {
            font-size: 1.2rem;
            color: #333;
            margin-bottom: 10px;
        }

        .upload-subtext {
            color: #666;
            font-size: 0.9rem;
        }

        .file-input {
            display: none;
        }

        .upload-progress {
            margin-top: 20px;
            display: none;
        }

        .progress-info {
            display: flex;
            justify-content: space-between;
            margin-bottom: 10px;
            font-weight: 600;
        }

        .file-preview {
            background: white;
            border-radius: 10px;
            padding: 20px;
            margin-top: 20px;
            box-shadow: 0 2px 10px rgba(0, 0, 0, 0.1);
            display: none;
        }

        .file-info {
            display: flex;
            align-items: center;
            gap: 15px;
            margin-bottom: 15px;
        }

        .file-icon {
            font-size: 2rem;
            color: #28a745;
        }

        .file-details h4 {
            margin-bottom: 5px;
            color: #333;
        }

        .file-details p {
            color: #666;
            font-size: 0.9rem;
        }

        .column-mapping {
            margin-top: 20px;
        }

        .mapping-grid {
            display: grid;
            grid-template-columns: 1fr 1fr;
            gap: 15px;
            margin-top: 15px;
        }

        .mapping-item {
            display: flex;
            align-items: center;
            gap: 10px;
            padding: 10px;
            background: #f8f9fa;
            border-radius: 8px;
        }

        .mapping-arrow {
            color: #28a745;
            font-weight: bold;
        }

        .alert {
            padding: 15px;
            border-radius: 10px;
            margin-bottom: 25px;
            font-weight: 500;
        }

        .alert-success {
            background: #d4edda;
            color: #155724;
            border: 1px solid #c3e6cb;
        }

        .alert-info {
            background: #d1ecf1;
            color: #0c5460;
            border: 1px solid #bee5eb;
        }

        .alert-warning {
            background: #fff3cd;
            color: #856404;
            border: 1px solid #ffeaa7;
        }

        .alert-danger {
            background: #f8d7da;
            color: #721c24;
            border: 1px solid #f5c6cb;
        }

        .filters-section {
            background: #f8f9fa;
            padding: 25px;
            border-radius: 15px;
            margin-bottom: 30px;
            box-shadow: 0 5px 15px rgba(0, 0, 0, 0.08);
        }

        .filters-title {
            color: #333;
            margin-bottom: 20px;
            font-size: 1.3em;
            display: flex;
            align-items: center;
            gap: 10px;
        }

        .filter-grid {
            display: grid;
            grid-template-columns: repeat(auto-fit, minmax(250px, 1fr));
            gap: 20px;
            margin-bottom: 25px;
        }

        .filter-group {
            display: flex;
            flex-direction: column;
        }

        .filter-label {
            font-weight: 600;
            margin-bottom: 8px;
            color: #555;
        }

        .filter-input {
            padding: 12px;
            border: 2px solid #e0e0e0;
            border-radius: 8px;
            font-size: 14px;
            transition: border-color 0.3s ease;
        }

        .filter-input:focus {
            outline: none;
            border-color: #28a745;
        }

        .button-group {
            display: flex;
            gap: 15px;
            flex-wrap: wrap;
        }

        .btn {
            padding: 12px 25px;
            border: none;
            border-radius: 8px;
            cursor: pointer;
            font-weight: 600;
            transition: all 0.3s ease;
            text-decoration: none;
            display: inline-block;
            text-align: center;
        }

        .btn-primary {
            background: linear-gradient(135deg, #28a745, #20c997);
            color: white;
        }

        .btn-secondary {
            background: #6c757d;
            color: white;
        }

        .btn-info {
            background: #17a2b8;
            color: white;
        }

        .btn-success {
            background: #28a745;
            color: white;
        }

        .btn-warning {
            background: #ffc107;
            color: #212529;
        }

        .btn-danger {
            background: #dc3545;
            color: white;
        }

        .btn:hover {
            transform: translateY(-2px);
            box-shadow: 0 5px 15px rgba(0, 0, 0, 0.2);
        }

        .btn:disabled {
            opacity: 0.6;
            cursor: not-allowed;
            transform: none;
        }

        .metrics-grid {
            display: grid;
            grid-template-columns: repeat(auto-fit, minmax(250px, 1fr));
            gap: 25px;
            margin-bottom: 40px;
        }

        .metric-card {
            background: white;
            padding: 25px;
            border-radius: 15px;
            box-shadow: 0 10px 30px rgba(0, 0, 0, 0.1);
            border-left: 5px solid #28a745;
            transition: transform 0.3s ease;
        }

        .metric-card:hover {
            transform: translateY(-5px);
        }

        .metric-title {
            color: #666;
            font-size: 0.9em;
            margin-bottom: 10px;
            text-transform: uppercase;
            letter-spacing: 1px;
        }

        .metric-value {
            font-size: 2.2em;
            font-weight: bold;
            color: #333;
            margin-bottom: 5px;
        }

        .metric-change {
            font-size: 0.9em;
            color: #888;
        }

        .chart-container {
            background: white;
            padding: 25px;
            border-radius: 15px;
            box-shadow: 0 10px 30px rgba(0, 0, 0, 0.1);
            margin-bottom: 30px;
        }

        .chart-title {
            color: #333;
            margin-bottom: 20px;
            font-size: 1.3em;
        }

        .data-table {
            background: white;
            border-radius: 15px;
            box-shadow: 0 10px 30px rgba(0, 0, 0, 0.1);
            overflow: hidden;
        }

        .table-header {
            background: #f8f9fa;
            padding: 20px 25px;
            margin: 0;
            color: #333;
            border-bottom: 1px solid #e0e0e0;
        }

        .table-container {
            max-height: 500px;
            overflow-y: auto;
        }

        table {
            width: 100%;
            border-collapse: collapse;
        }

        th, td {
            padding: 15px;
            text-align: left;
            border-bottom: 1px solid #e0e0e0;
        }

        th {
            background: #f8f9fa;
            font-weight: 600;
            color: #555;
            position: sticky;
            top: 0;
            z-index: 10;
        }

        tr:hover {
            background: #f8f9fa;
        }

        .pagination {
            display: flex;
            justify-content: center;
            align-items: center;
            gap: 10px;
            padding: 20px;
            background: #f8f9fa;
        }

        .pagination button {
            padding: 8px 12px;
            border: 1px solid #ddd;
            background: white;
            border-radius: 5px;
            cursor: pointer;
        }

        .pagination button:hover {
            background: #f0f0f0;
        }

        .pagination button:disabled {
            opacity: 0.5;
            cursor: not-allowed;
        }

        .page-info {
            font-weight: 600;
            color: #555;
        }

        .hidden {
            display: none !important;
        }

        @media (max-width: 768px) {
            .header h1 {
                font-size: 2em;
            }
            
            .filter-grid {
                grid-template-columns: 1fr;
            }
            
            .metrics-grid {
                grid-template-columns: 1fr;
            }
            
            .button-group {
                flex-direction: column;
            }
            
            .status-grid {
                grid-template-columns: 1fr;
            }

            .tabs-nav {
                flex-direction: column;
            }

            .mapping-grid {
                grid-template-columns: 1fr;
            }
        }
    </style>
</head>
<body>
    <div class="loading-overlay" id="loadingOverlay">
        <div class="loading-content">
            <div class="loading-spinner"></div>
            <h3>📊 Maestro Food Dashboard</h3>
            <p id="loadingText">Conectando ao projeto...</p>
            <div class="progress-bar">
                <div class="progress-fill" id="progressFill"></div>
            </div>
            <p id="progressText">0%</p>
            <div style="margin-top: 15px; font-size: 0.9em; color: #666;">
                📋 Sistema com upload de dados<br>
                🚫 Filtro de registros inválidos ativo
            </div>
        </div>
    </div>

    <div class="dashboard-container">
        <div class="header">
            <h1>📊 Maestro Food Dashboard</h1>
            <span class="project-badge">📤 COM UPLOAD</span>
            <span class="project-badge">📋 EXCEL/CSV</span>
        </div>

        <div class="status-container">
            <div class="status-grid">
                <div class="status-item">
                    <div class="status-label">Total de Registros</div>
                    <div class="status-value" id="totalRecords">0</div>
                </div>
                <div class="status-item">
                    <div class="status-label">Registros Válidos</div>
                    <div class="status-value" id="validRecords">0</div>
                </div>
                <div class="status-item">
                    <div class="status-label">Último Upload</div>
                    <div class="status-value" id="lastUpload">Nenhum</div>
                </div>
                <div class="status-item">
                    <div class="status-label">Status</div>
                    <div class="status-value" id="connectionStatus">Conectando...</div>
                </div>
            </div>
        </div>

        <div class="main-content">
            <div class="content-header">
                <h2>📊 Dashboard com Upload de Dados</h2>
                <p>Importe arquivos Excel/CSV diretamente pela interface</p>
            </div>

            <div class="content-body">
                <div class="tabs-container">
                    <div class="tabs-nav">
                        <button class="tab-button active" onclick="switchTab('upload')">
                            📤 Carregar Dados
                        </button>
                        <button class="tab-button" onclick="switchTab('dashboard')">
                            📊 Dashboard
                        </button>
                        <button class="tab-button" onclick="switchTab('config')">
                            ⚙️ Configurações
                        </button>
                    </div>

                    <!-- ABA UPLOAD DE DADOS -->
                    <div id="uploadTab" class="tab-content active">
                        <div class="alert alert-info">
                            <strong>📤 Upload de Dados:</strong> Arraste e solte seu arquivo Excel (.xlsx) ou CSV (.csv) na área abaixo, ou clique para selecionar.
                            <br><strong>📋 Formatos Suportados:</strong> Excel (.xlsx), CSV (.csv)
                            <br><strong>🎯 Estrutura:</strong> O arquivo deve ter as mesmas colunas do template Excel fornecido.
                        </div>

                        <div class="upload-section">
                            <h3>📤 Importar Dados do Banco</h3>
                            
                            <div class="upload-area" id="uploadArea" onclick="document.getElementById('fileInput').click()">
                                <div class="upload-icon">📁</div>
                                <div class="upload-text">Clique aqui ou arraste seu arquivo</div>
                                <div class="upload-subtext">Suporta Excel (.xlsx) e CSV (.csv) | Máximo 150MB</div>
                            </div>

                            <input type="file" id="fileInput" class="file-input" accept=".xlsx,.csv" onchange="handleFileSelect(event)">

                            <div class="upload-progress" id="uploadProgress">
                                <div class="progress-info">
                                    <span id="progressLabel">Processando...</span>
                                    <span id="progressPercent">0%</span>
                                </div>
                                <div class="progress-bar">
                                    <div class="progress-fill" id="uploadProgressFill"></div>
                                </div>
                            </div>

                            <div class="file-preview" id="filePreview">
                                <div class="file-info">
                                    <div class="file-icon">📊</div>
                                    <div class="file-details">
                                        <h4 id="fileName">arquivo.xlsx</h4>
                                        <p id="fileSize">Tamanho: 0 KB | Linhas: 0</p>
                                    </div>
                                </div>

                                <div class="column-mapping">
                                    <h4>🔗 Mapeamento de Colunas</h4>
                                    <div class="mapping-grid" id="columnMapping">
                                        <!-- Mapeamento será preenchido dinamicamente -->
                                    </div>
                                </div>

                                <div class="button-group" style="margin-top: 20px;">
                                    <button class="btn btn-success" onclick="importData()" id="importBtn">
                                        📤 Importar Dados
                                    </button>
                                    <button class="btn btn-secondary" onclick="clearUpload()">
                                        🗑️ Limpar
                                    </button>
                                    <button class="btn btn-info" onclick="previewData()">
                                        👁️ Visualizar Dados
                                    </button>
                                </div>
                            </div>
                        </div>

                        <div class="alert alert-warning" id="uploadWarning" style="display: none;">
                            <strong>⚠️ Atenção:</strong> <span id="warningMessage"></span>
                        </div>

                        <div class="alert alert-success" id="uploadSuccess" style="display: none;">
                            <strong>✅ Sucesso:</strong> <span id="successMessage"></span>
                        </div>

                        <div class="alert alert-danger" id="uploadError" style="display: none;">
                            <strong>❌ Erro:</strong> <span id="errorMessage"></span>
                        </div>
                    </div>

                    <!-- ABA DASHBOARD -->
                    <div id="dashboardTab" class="tab-content">
                        <div class="alert alert-success">
                            <strong>📊 Dashboard Ativo:</strong> Visualize e analise seus dados importados.
                            <br><strong>🚫 Filtro Automático:</strong> Registros com loja vazia são removidos automaticamente.
                        </div>

                        <div class="filters-section">
                            <h3 class="filters-title">
                                🔍 Filtros
                                <span id="currentPeriod" style="font-size: 0.8em; color: #666;">Carregando...</span>
                            </h3>
                            
                            <div class="filter-grid">
                                <div class="filter-group">
                                    <label class="filter-label">🏢 Unidade</label>
                                    <select class="filter-input" id="unidadeFilter">
                                        <option value="">Todas as Unidades</option>
                                    </select>
                                </div>
                                
                                <div class="filter-group">
                                    <label class="filter-label">🏪 Loja</label>
                                    <select class="filter-input" id="lojaFilter">
                                        <option value="">Todas as Lojas</option>
                                    </select>
                                </div>
                                
                                <div class="filter-group">
                                    <label class="filter-label">📋 Tipo</label>
                                    <select class="filter-input" id="tipoFilter">
                                        <option value="">Todos os Tipos</option>
                                    </select>
                                </div>
                                
                                <div class="filter-group">
                                    <label class="filter-label">🌅 Turno</label>
                                    <select class="filter-input" id="turnoFilter">
                                        <option value="">Todos os Turnos</option>
                                    </select>
                                </div>
                                
                                <div class="filter-group">
                                    <label class="filter-label">📱 Canal</label>
                                    <select class="filter-input" id="canalFilter">
                                        <option value="">Todos os Canais</option>
                                    </select>
                                </div>
                                
                                <div class="filter-group">
                                    <label class="filter-label">💳 Pagamento</label>
                                    <select class="filter-input" id="pagamentoFilter">
                                        <option value="">Todas as Formas</option>
                                    </select>
                                </div>
                                
                                <div class="filter-group">
                                    <label class="filter-label">📅 Data Inicial</label>
                                    <input type="date" class="filter-input" id="dataInicial">
                                </div>
                                
                                <div class="filter-group">
                                    <label class="filter-label">📅 Data Final</label>
                                    <input type="date" class="filter-input" id="dataFinal">
                                </div>
                            </div>
                            
                            <div class="button-group">
                                <button class="btn btn-primary" onclick="applyFilters()">🔍 Aplicar Filtros</button>
                                <button class="btn btn-secondary" onclick="clearFilters()">🔄 Limpar Filtros</button>
                                <button class="btn btn-info" onclick="loadData()">🔄 Recarregar</button>
                                <button class="btn btn-success" onclick="showStatistics()">📊 Estatísticas</button>
                            </div>
                        </div>

                        <div class="metrics-grid">
                            <div class="metric-card">
                                <h4 class="metric-title">📦 Total de Pedidos</h4>
                                <div class="metric-value" id="totalPedidos">-</div>
                                <div class="metric-change">Dados válidos</div>
                            </div>
                            
                            <div class="metric-card">
                                <h4 class="metric-title">🎯 Ticket Médio</h4>
                                <div class="metric-value" id="ticketMedio">R$ -</div>
                                <div class="metric-change">Sem registros inválidos</div>
                            </div>
                            
                            <div class="metric-card">
                                <h4 class="metric-title">💰 Faturamento Total</h4>
                                <div class="metric-value" id="faturamentoTotal">R$ -</div>
                                <div class="metric-change">Dados limpos</div>
                            </div>
                            
                            <div class="metric-card">
                                <h4 class="metric-title">📈 Faturamento/Dia</h4>
                                <div class="metric-value" id="faturamentoDia">R$ -</div>
                                <div class="metric-change">Média diária</div>
                            </div>
                            
                            <div class="metric-card">
                                <h4 class="metric-title">👥 Consumidores Únicos</h4>
                                <div class="metric-value" id="consumidoresUnicos">-</div>
                                <div class="metric-change">Clientes diferentes</div>
                            </div>
                            
                            <div class="metric-card">
                                <h4 class="metric-title">🎫 Taxa de Cupom</h4>
                                <div class="metric-value" id="taxaCupom">-%</div>
                                <div class="metric-change">Pedidos com cupom</div>
                            </div>
                        </div>

                        <div class="chart-container">
                            <h3 class="chart-title">📊 Receita Diária</h3>
                            <canvas id="receitaChart" width="400" height="200"></canvas>
                        </div>

                        <div class="data-table">
                            <h3 class="table-header">📋 Dados Detalhados</h3>
                            <div class="table-container">
                                <table>
                                    <thead>
                                        <tr>
                                            <th>Data</th>
                                            <th>Loja</th>
                                            <th>Consumidor</th>
                                            <th>Tipo</th>
                                            <th>Canal</th>
                                            <th>Total</th>
                                            <th>Cupom</th>
                                        </tr>
                                    </thead>
                                    <tbody id="tableBody">
                                        <tr>
                                            <td colspan="7" style="text-align: center; padding: 40px;">Carregando dados...</td>
                                        </tr>
                                    </tbody>
                                </table>
                            </div>
                            <div class="pagination">
                                <button onclick="previousPage()">⬅️ Anterior</button>
                                <span class="page-info" id="pageInfo">Página 1 de 1</span>
                                <button onclick="nextPage()">Próxima ➡️</button>
                            </div>
                        </div>
                    </div>

                    <!-- ABA CONFIGURAÇÕES -->
                    <div id="configTab" class="tab-content">
                        <div class="alert alert-info">
                            <strong>⚙️ Configurações do Sistema:</strong> Gerencie dados e configurações do dashboard.
                        </div>

                        <div class="filters-section">
                            <h3 class="filters-title">🗄️ Gerenciamento de Dados</h3>
                            
                            <div class="button-group">
                                <button class="btn btn-info" onclick="showDatabaseInfo()">📊 Info do Banco</button>
                                <button class="btn btn-warning" onclick="clearAllData()">🗑️ Limpar Todos os Dados</button>
                                <button class="btn btn-success" onclick="exportData()">📤 Exportar Dados</button>
                                <button class="btn btn-secondary" onclick="showDebugInfo()">🔧 Debug</button>
                            </div>
                        </div>

                        <div class="filters-section">
                            <h3 class="filters-title">📋 Template de Importação</h3>
                            <p>Use este template para preparar seus dados antes da importação:</p>
                            
                            <div class="button-group">
                                <button class="btn btn-primary" onclick="downloadTemplate()">📥 Baixar Template Excel</button>
                                <button class="btn btn-secondary" onclick="downloadTemplateCSV()">📥 Baixar Template CSV</button>
                            </div>
                        </div>
                    </div>
                </div>
            </div>
        </div>
    </div>

    <script>
        // 🚀 CONFIGURAÇÃO PARA PROJETO COM UPLOAD
        const SUPABASE_URL = 'https://befjdgvxwkxqhvqwhzog.supabase.co';
        const SUPABASE_ANON_KEY = 'eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpc3MiOiJzdXBhYmFzZSIsInJlZiI6ImJlZmpkZ3Z4d2t4cWh2cXdoem9nIiwicm9sZSI6ImFub24iLCJpYXQiOjE3NTUyODUwMjcsImV4cCI6MjA3MDg2MTAyN30.j2wDCGYEWjKiCcfvQoI8M14YdNrqz-YUphky4KNq5Qw';
        
        // Variáveis globais
        let supabaseClient = null;
        let allData = [];
        let filteredData = [];
        let currentPage = 1;
        const itemsPerPage = 50;
        let chart = null;
        let uploadedFile = null;
        let parsedData = null;

        // Mapeamento de colunas Excel para Supabase
        const COLUMN_MAPPING = {
            'Unidade': 'unidade',
            'Pedido': 'pedido',
            'Codigo': 'codigo',
            ' loja': 'loja',
            'loja': 'loja',
            'Tipo': 'tipo',
            'Turno': 'turno',
            'Canal': 'canal',
            'Número do pedido no parceiro': 'numero_pedido_parceiro',
            'Data': 'data_venda',
            'Consumidor': 'consumidor',
            'Cupom': 'cupom',
            'Pagamento': 'pagamento',
            'Cancelado': 'cancelado',
            'Motivo do cancelamento': 'motivo_cancelamento',
            'Itens': 'itens',
            'Entrega': 'entrega',
            'Entregador': 'entregador_id',
            'Entregador.1': 'entregador_nome',
            'Bairro': 'bairro',
            'CEP': 'cep',
            'Acrescimo': 'acrescimo',
            'Motivo de acréscimo': 'motivo_acrescimo',
            'Desconto': 'desconto',
            'Motivo do desconto': 'motivo_desconto',
            'Total': 'total',
            'taxa de serviço': 'taxa_servico'
        };

        // Aguardar carregamento completo
        window.addEventListener('load', function() {
            console.log('📊 Iniciando Dashboard com Upload...');
            initDashboard();
            setupUploadEvents();
        });

        // Função para inicializar dashboard
        function initDashboard() {
            try {
                // Criar cliente Supabase
                supabaseClient = supabase.createClient(SUPABASE_URL, SUPABASE_ANON_KEY);
                console.log('✅ Cliente Supabase criado');
                
                // Atualizar status
                document.getElementById('connectionStatus').textContent = 'Conectado';
                
                // Iniciar carregamento
                loadData();
            } catch (error) {
                console.error('❌ Erro ao inicializar dashboard:', error);
                document.getElementById('loadingText').textContent = 'Erro ao conectar: ' + error.message;
                document.getElementById('connectionStatus').textContent = 'Erro';
            }
        }

        // Função para configurar eventos de upload
        function setupUploadEvents() {
            const uploadArea = document.getElementById('uploadArea');
            const fileInput = document.getElementById('fileInput');

            // Drag and drop events
            uploadArea.addEventListener('dragover', (e) => {
                e.preventDefault();
                uploadArea.classList.add('dragover');
            });

            uploadArea.addEventListener('dragleave', (e) => {
                e.preventDefault();
                uploadArea.classList.remove('dragover');
            });

            uploadArea.addEventListener('drop', (e) => {
                e.preventDefault();
                uploadArea.classList.remove('dragover');
                
                const files = e.dataTransfer.files;
                if (files.length > 0) {
                    handleFile(files[0]);
                }
            });
        }

        // Função para alternar abas
        function switchTab(tabName) {
            // Remover classe active de todos os botões e conteúdos
            document.querySelectorAll('.tab-button').forEach(btn => btn.classList.remove('active'));
            document.querySelectorAll('.tab-content').forEach(content => content.classList.remove('active'));
            
            // Adicionar classe active ao botão e conteúdo selecionado
            event.target.classList.add('active');
            document.getElementById(tabName + 'Tab').classList.add('active');
        }

        // Função para lidar com seleção de arquivo
        function handleFileSelect(event) {
            const file = event.target.files[0];
            if (file) {
                handleFile(file);
            }
        }

        // Função para processar arquivo
        function handleFile(file) {
            console.log('📁 Processando arquivo:', file.name);
            
            // Validar tipo de arquivo
            const validTypes = ['.xlsx', '.csv'];
            const fileExtension = '.' + file.name.split('.').pop().toLowerCase();
            
            if (!validTypes.includes(fileExtension)) {
                showError('Tipo de arquivo não suportado. Use Excel (.xlsx) ou CSV (.csv)');
                return;
            }
            
            // Validar tamanho (150MB)
            if (file.size > 150 * 1024 * 1024) {
                showError('Arquivo muito grande. Máximo 150MB permitido.');
                return;
            }
            
            uploadedFile = file;
            
            // Mostrar informações do arquivo
            document.getElementById('fileName').textContent = file.name;
            document.getElementById('fileSize').textContent = `Tamanho: ${(file.size / 1024).toFixed(1)} KB`;
            
            // Mostrar preview
            document.getElementById('filePreview').style.display = 'block';
            
            // Processar arquivo
            if (fileExtension === '.xlsx') {
                processExcelFile(file);
            } else if (fileExtension === '.csv') {
                processCSVFile(file);
            }
        }

        // Função para processar arquivo Excel
        function processExcelFile(file) {
            const reader = new FileReader();
            
            reader.onload = function(e) {
                try {
                    const data = new Uint8Array(e.target.result);
                    const workbook = XLSX.read(data, { type: 'array' });
                    
                    // Pegar primeira planilha
                    const sheetName = workbook.SheetNames[0];
                    const worksheet = workbook.Sheets[sheetName];
                    
                    // Converter para JSON
                    const jsonData = XLSX.utils.sheet_to_json(worksheet);
                    
                    console.log('📊 Dados Excel processados:', jsonData.length, 'linhas');
                    
                    parsedData = jsonData;
                    
                    // Atualizar informações
                    document.getElementById('fileSize').textContent = 
                        `Tamanho: ${(file.size / 1024).toFixed(1)} KB | Linhas: ${jsonData.length}`;
                    
                    // Mostrar mapeamento de colunas
                    showColumnMapping(Object.keys(jsonData[0] || {}));
                    
                    showSuccess(`Arquivo Excel processado: ${jsonData.length} linhas encontradas`);
                    
                } catch (error) {
                    console.error('❌ Erro ao processar Excel:', error);
                    showError('Erro ao processar arquivo Excel: ' + error.message);
                }
            };
            
            reader.readAsArrayBuffer(file);
        }

        // Função para processar arquivo CSV
        function processCSVFile(file) {
            const reader = new FileReader();
            
            reader.onload = function(e) {
                try {
                    const csv = e.target.result;
                    const lines = csv.split('\n');
                    const headers = lines[0].split(';'); // Assumindo separador ;
                    
                    const jsonData = [];
                    for (let i = 1; i < lines.length; i++) {
                        if (lines[i].trim()) {
                            const values = lines[i].split(';');
                            const row = {};
                            headers.forEach((header, index) => {
                                row[header.trim()] = values[index] ? values[index].trim() : '';
                            });
                            jsonData.push(row);
                        }
                    }
                    
                    console.log('📊 Dados CSV processados:', jsonData.length, 'linhas');
                    
                    parsedData = jsonData;
                    
                    // Atualizar informações
                    document.getElementById('fileSize').textContent = 
                        `Tamanho: ${(file.size / 1024).toFixed(1)} KB | Linhas: ${jsonData.length}`;
                    
                    // Mostrar mapeamento de colunas
                    showColumnMapping(headers.map(h => h.trim()));
                    
                    showSuccess(`Arquivo CSV processado: ${jsonData.length} linhas encontradas`);
                    
                } catch (error) {
                    console.error('❌ Erro ao processar CSV:', error);
                    showError('Erro ao processar arquivo CSV: ' + error.message);
                }
            };
            
            reader.readAsText(file);
        }

        // Função para mostrar mapeamento de colunas
        function showColumnMapping(columns) {
            const mappingContainer = document.getElementById('columnMapping');
            mappingContainer.innerHTML = '';
            
            columns.forEach(column => {
                const mappedColumn = COLUMN_MAPPING[column] || 'não_mapeado';
                const isValid = COLUMN_MAPPING[column] ? '✅' : '⚠️';
                
                const mappingItem = document.createElement('div');
                mappingItem.className = 'mapping-item';
                mappingItem.innerHTML = `
                    <span>${isValid} ${column}</span>
                    <span class="mapping-arrow">→</span>
                    <span>${mappedColumn}</span>
                `;
                
                mappingContainer.appendChild(mappingItem);
            });
        }

        // Função para importar dados
        async function importData() {
            if (!parsedData || parsedData.length === 0) {
                showError('Nenhum dado para importar');
                return;
            }
            
            console.log('📤 Iniciando importação de', parsedData.length, 'registros...');
            
            // Mostrar progresso
            document.getElementById('uploadProgress').style.display = 'block';
            document.getElementById('importBtn').disabled = true;
            
            try {
                // Converter dados para formato Supabase
                const supabaseData = parsedData.map(row => {
                    const mappedRow = {};
                    
                    Object.keys(row).forEach(key => {
                        const supabaseColumn = COLUMN_MAPPING[key];
                        if (supabaseColumn) {
                            let value = row[key];
                            
                            // Tratar data
                            if (supabaseColumn === 'data_venda' && value) {
                                // Converter formato dd/mm/yyyy hh:mm para ISO
                                if (typeof value === 'string' && value.includes('/')) {
                                    const [datePart, timePart] = value.split(' ');
                                    const [day, month, year] = datePart.split('/');
                                    value = `${year}-${month.padStart(2, '0')}-${day.padStart(2, '0')}T${timePart || '00:00:00'}`;
                                }
                            }
                            
                            // Tratar números
                            if (['total', 'itens', 'entrega', 'acrescimo', 'desconto', 'taxa_servico'].includes(supabaseColumn)) {
                                value = parseFloat(value) || 0;
                            }
                            
                            // Tratar inteiros
                            if (['pedido', 'numero_pedido_parceiro', 'entregador_id'].includes(supabaseColumn)) {
                                value = parseInt(value) || null;
                            }
                            
                            mappedRow[supabaseColumn] = value;
                        }
                    });
                    
                    return mappedRow;
                });
                
                console.log('📊 Dados convertidos:', supabaseData.slice(0, 3));
                
                // Importar em lotes de 1000
                const batchSize = 1000;
                let imported = 0;
                
                for (let i = 0; i < supabaseData.length; i += batchSize) {
                    const batch = supabaseData.slice(i, i + batchSize);
                    
                    const { data, error } = await supabaseClient
                        .from('maestro_vendas_excel')
                        .insert(batch);
                    
                    if (error) {
                        throw error;
                    }
                    
                    imported += batch.length;
                    const progress = (imported / supabaseData.length) * 100;
                    
                    // Atualizar progresso
                    document.getElementById('uploadProgressFill').style.width = progress + '%';
                    document.getElementById('progressPercent').textContent = Math.round(progress) + '%';
                    document.getElementById('progressLabel').textContent = `Importando... ${imported}/${supabaseData.length}`;
                }
                
                console.log('✅ Importação concluída:', imported, 'registros');
                
                // Atualizar status
                document.getElementById('lastUpload').textContent = new Date().toLocaleString('pt-BR');
                
                showSuccess(`Importação concluída com sucesso! ${imported} registros importados.`);
                
                // Recarregar dados
                await loadData();
                
                // Ir para aba dashboard
                switchTab('dashboard');
                
            } catch (error) {
                console.error('❌ Erro na importação:', error);
                showError('Erro na importação: ' + error.message);
            } finally {
                document.getElementById('uploadProgress').style.display = 'none';
                document.getElementById('importBtn').disabled = false;
            }
        }

        // Função para limpar upload
        function clearUpload() {
            uploadedFile = null;
            parsedData = null;
            document.getElementById('fileInput').value = '';
            document.getElementById('filePreview').style.display = 'none';
            document.getElementById('uploadProgress').style.display = 'none';
            hideMessages();
        }

        // Função para visualizar dados
        function previewData() {
            if (!parsedData || parsedData.length === 0) {
                showError('Nenhum dado para visualizar');
                return;
            }
            
            const preview = parsedData.slice(0, 5);
            console.log('👁️ Preview dos dados:', preview);
            
            alert('Preview dos dados (5 primeiras linhas):\n\n' + 
                  JSON.stringify(preview, null, 2));
        }

        // Funções de mensagem
        function showSuccess(message) {
            hideMessages();
            document.getElementById('uploadSuccess').style.display = 'block';
            document.getElementById('successMessage').textContent = message;
        }

        function showError(message) {
            hideMessages();
            document.getElementById('uploadError').style.display = 'block';
            document.getElementById('errorMessage').textContent = message;
        }

        function showWarning(message) {
            hideMessages();
            document.getElementById('uploadWarning').style.display = 'block';
            document.getElementById('warningMessage').textContent = message;
        }

        function hideMessages() {
            document.getElementById('uploadSuccess').style.display = 'none';
            document.getElementById('uploadError').style.display = 'none';
            document.getElementById('uploadWarning').style.display = 'none';
        }

        // Função para carregar dados (mesmo código anterior)
        async function loadData() {
            console.log('📊 Carregando dados...');
            
            try {
                const { data, error } = await supabaseClient
                    .from('maestro_vendas_excel')
                    .select('*')
                    .order('data_venda', { ascending: false });
                
                if (error) {
                    throw error;
                }
                
                console.log(`✅ Dados carregados: ${data.length} registros`);
                
                // Filtrar dados válidos (loja não vazia)
                const validData = filterValidData(data || []);
                
                allData = validData;
                filteredData = [...allData];
                
                // Atualizar contadores
                document.getElementById('totalRecords').textContent = (data || []).length;
                document.getElementById('validRecords').textContent = allData.length;
                
                // Processar dados
                await processData();
                
                // Esconder loading
                document.getElementById('loadingOverlay').classList.add('hidden');
                document.getElementById('connectionStatus').textContent = 'Ativo';
                
                console.log('✅ Dashboard carregado com sucesso!');
                
            } catch (error) {
                console.error('❌ Erro ao carregar dados:', error);
                document.getElementById('loadingText').textContent = 'Erro: ' + error.message;
                document.getElementById('connectionStatus').textContent = 'Erro';
            }
        }

        // Função para filtrar dados válidos
        function filterValidData(data) {
            console.log(`🔍 Aplicando filtro de loja vazia em ${data.length} registros...`);
            
            const validData = data.filter(record => {
                const loja = (record.loja || '').trim();
                
                // Remove registros com loja vazia
                if (!loja || loja === '') {
                    return false;
                }
                
                return true;
            });
            
            const removedCount = data.length - validData.length;
            
            console.log(`🚫 Filtro loja vazia: Removidos ${removedCount} registros inválidos`);
            console.log(`✅ Registros válidos mantidos: ${validData.length}`);
            
            return validData;
        }

        // Função para processar dados
        async function processData() {
            console.log('📊 Processando dados...');
            
            if (allData.length === 0) {
                console.log('⚠️ Nenhum dado para processar');
                return;
            }
            
            // Atualizar período
            const dates = allData.map(d => new Date(d.data_venda)).filter(d => !isNaN(d));
            if (dates.length > 0) {
                const minDate = new Date(Math.min(...dates));
                const maxDate = new Date(Math.max(...dates));
                document.getElementById('currentPeriod').textContent = 
                    `${minDate.toLocaleDateString('pt-BR')} - ${maxDate.toLocaleDateString('pt-BR')}`;
            }
            
            // Preencher filtros
            populateFilters();
            
            // Aplicar filtros iniciais
            applyFilters();
        }

        // Função para preencher filtros
        function populateFilters() {
            // Unidades
            const unidades = [...new Set(allData.map(d => d.unidade).filter(Boolean))].sort();
            const unidadeSelect = document.getElementById('unidadeFilter');
            unidadeSelect.innerHTML = '<option value="">Todas as Unidades</option>';
            unidades.forEach(unidade => {
                unidadeSelect.innerHTML += `<option value="${unidade}">${unidade}</option>`;
            });
            
            // Lojas
            const lojas = [...new Set(allData.map(d => d.loja).filter(Boolean))].sort();
            const lojaSelect = document.getElementById('lojaFilter');
            lojaSelect.innerHTML = '<option value="">Todas as Lojas</option>';
            lojas.forEach(loja => {
                lojaSelect.innerHTML += `<option value="${loja}">${loja}</option>`;
            });
            
            // Tipos
            const tipos = [...new Set(allData.map(d => d.tipo).filter(Boolean))].sort();
            const tipoSelect = document.getElementById('tipoFilter');
            tipoSelect.innerHTML = '<option value="">Todos os Tipos</option>';
            tipos.forEach(tipo => {
                tipoSelect.innerHTML += `<option value="${tipo}">${tipo}</option>`;
            });
            
            // Turnos
            const turnos = [...new Set(allData.map(d => d.turno).filter(Boolean))].sort();
            const turnoSelect = document.getElementById('turnoFilter');
            turnoSelect.innerHTML = '<option value="">Todos os Turnos</option>';
            turnos.forEach(turno => {
                turnoSelect.innerHTML += `<option value="${turno}">${turno}</option>`;
            });
            
            // Canais
            const canais = [...new Set(allData.map(d => d.canal).filter(Boolean))].sort();
            const canalSelect = document.getElementById('canalFilter');
            canalSelect.innerHTML = '<option value="">Todos os Canais</option>';
            canais.forEach(canal => {
                canalSelect.innerHTML += `<option value="${canal}">${canal}</option>`;
            });
            
            // Pagamentos
            const pagamentos = [...new Set(allData.map(d => d.pagamento).filter(Boolean))].sort();
            const pagamentoSelect = document.getElementById('pagamentoFilter');
            pagamentoSelect.innerHTML = '<option value="">Todas as Formas</option>';
            pagamentos.forEach(pagamento => {
                pagamentoSelect.innerHTML += `<option value="${pagamento}">${pagamento}</option>`;
            });
        }

        // Função para aplicar filtros
        function applyFilters() {
            console.log('🔍 Aplicando filtros...');
            
            filteredData = allData.filter(record => {
                // Filtro por unidade
                const unidade = document.getElementById('unidadeFilter').value;
                if (unidade && record.unidade !== unidade) return false;
                
                // Filtro por loja
                const loja = document.getElementById('lojaFilter').value;
                if (loja && record.loja !== loja) return false;
                
                // Filtro por tipo
                const tipo = document.getElementById('tipoFilter').value;
                if (tipo && record.tipo !== tipo) return false;
                
                // Filtro por turno
                const turno = document.getElementById('turnoFilter').value;
                if (turno && record.turno !== turno) return false;
                
                // Filtro por canal
                const canal = document.getElementById('canalFilter').value;
                if (canal && record.canal !== canal) return false;
                
                // Filtro por pagamento
                const pagamento = document.getElementById('pagamentoFilter').value;
                if (pagamento && record.pagamento !== pagamento) return false;
                
                // Filtro por data
                const dataInicial = document.getElementById('dataInicial').value;
                const dataFinal = document.getElementById('dataFinal').value;
                
                if (dataInicial || dataFinal) {
                    const dataVenda = new Date(record.data_venda);
                    if (dataInicial && dataVenda < new Date(dataInicial)) return false;
                    if (dataFinal && dataVenda > new Date(dataFinal + 'T23:59:59')) return false;
                }
                
                return true;
            });
            
            console.log(`✅ Filtros aplicados: ${filteredData.length} registros`);
            
            // Atualizar métricas
            updateMetrics();
            
            // Atualizar gráfico
            updateChart();
            
            // Atualizar tabela
            updateTable();
        }

        // Função para atualizar métricas
        function updateMetrics() {
            if (filteredData.length === 0) {
                document.getElementById('totalPedidos').textContent = '0';
                document.getElementById('ticketMedio').textContent = 'R$ 0,00';
                document.getElementById('faturamentoTotal').textContent = 'R$ 0,00';
                document.getElementById('faturamentoDia').textContent = 'R$ 0,00';
                document.getElementById('consumidoresUnicos').textContent = '0';
                document.getElementById('taxaCupom').textContent = '0%';
                return;
            }
            
            // Calcular métricas
            const totalPedidos = filteredData.length;
            const faturamentoTotal = filteredData.reduce((sum, record) => {
                const total = parseFloat(record.total || 0);
                return sum + (isNaN(total) ? 0 : total);
            }, 0);
            const ticketMedio = faturamentoTotal / totalPedidos;
            
            // Calcular dias únicos
            const diasUnicos = new Set(filteredData.map(d => d.data_venda.split('T')[0])).size;
            const faturamentoDia = diasUnicos > 0 ? faturamentoTotal / diasUnicos : 0;
            
            // Consumidores únicos
            const consumidoresUnicos = new Set(filteredData.map(d => d.consumidor).filter(Boolean)).size;
            
            // Taxa de cupom
            const pedidosComCupom = filteredData.filter(d => d.cupom === 'S').length;
            const taxaCupom = totalPedidos > 0 ? (pedidosComCupom / totalPedidos) * 100 : 0;
            
            // Atualizar DOM
            document.getElementById('totalPedidos').textContent = totalPedidos.toLocaleString();
            document.getElementById('ticketMedio').textContent = `R$ ${ticketMedio.toFixed(2).replace('.', ',')}`;
            document.getElementById('faturamentoTotal').textContent = `R$ ${faturamentoTotal.toFixed(2).replace('.', ',')}`;
            document.getElementById('faturamentoDia').textContent = `R$ ${faturamentoDia.toFixed(2).replace('.', ',')}`;
            document.getElementById('consumidoresUnicos').textContent = consumidoresUnicos.toLocaleString();
            document.getElementById('taxaCupom').textContent = `${taxaCupom.toFixed(1)}%`;
        }

        // Função para atualizar gráfico
        function updateChart() {
            const ctx = document.getElementById('receitaChart').getContext('2d');
            
            // Agrupar dados por data
            const receitaPorDia = {};
            filteredData.forEach(record => {
                const data = record.data_venda.split('T')[0];
                const total = parseFloat(record.total || 0);
                if (!isNaN(total)) {
                    receitaPorDia[data] = (receitaPorDia[data] || 0) + total;
                }
            });
            
            // Ordenar datas
            const datas = Object.keys(receitaPorDia).sort();
            const receitas = datas.map(data => receitaPorDia[data]);
            
            // Destruir gráfico anterior se existir
            if (chart) {
                chart.destroy();
            }
            
            // Criar novo gráfico
            chart = new Chart(ctx, {
                type: 'line',
                data: {
                    labels: datas.map(data => new Date(data).toLocaleDateString('pt-BR')),
                    datasets: [{
                        label: 'Receita Diária',
                        data: receitas,
                        borderColor: '#28a745',
                        backgroundColor: 'rgba(40, 167, 69, 0.1)',
                        borderWidth: 2,
                        fill: true,
                        tension: 0.4
                    }]
                },
                options: {
                    responsive: true,
                    maintainAspectRatio: false,
                    plugins: {
                        legend: {
                            display: false
                        }
                    },
                    scales: {
                        y: {
                            beginAtZero: true,
                            ticks: {
                                callback: function(value) {
                                    return 'R$ ' + value.toFixed(0);
                                }
                            }
                        }
                    }
                }
            });
        }

        // Função para atualizar tabela
        function updateTable() {
            const tbody = document.getElementById('tableBody');
            const startIndex = (currentPage - 1) * itemsPerPage;
            const endIndex = startIndex + itemsPerPage;
            const pageData = filteredData.slice(startIndex, endIndex);
            
            if (pageData.length === 0) {
                tbody.innerHTML = '<tr><td colspan="7" style="text-align: center; padding: 40px;">Nenhum dado encontrado</td></tr>';
            } else {
                tbody.innerHTML = pageData.map(record => {
                    const total = parseFloat(record.total || 0);
                    
                    return `
                        <tr>
                            <td>${new Date(record.data_venda).toLocaleDateString('pt-BR')}</td>
                            <td>${record.loja || 'N/A'}</td>
                            <td>${record.consumidor || 'N/A'}</td>
                            <td>${record.tipo || 'N/A'}</td>
                            <td>${record.canal || 'N/A'}</td>
                            <td>R$ ${(isNaN(total) ? 0 : total).toFixed(2).replace('.', ',')}</td>
                            <td>${record.cupom === 'S' ? '✅' : '❌'}</td>
                        </tr>
                    `;
                }).join('');
            }
            
            // Atualizar paginação
            const totalPages = Math.ceil(filteredData.length / itemsPerPage);
            document.getElementById('pageInfo').textContent = `Página ${currentPage} de ${totalPages}`;
        }

        // Funções de paginação
        function previousPage() {
            if (currentPage > 1) {
                currentPage--;
                updateTable();
            }
        }

        function nextPage() {
            const totalPages = Math.ceil(filteredData.length / itemsPerPage);
            if (currentPage < totalPages) {
                currentPage++;
                updateTable();
            }
        }

        // Função para limpar filtros
        function clearFilters() {
            document.getElementById('unidadeFilter').value = '';
            document.getElementById('lojaFilter').value = '';
            document.getElementById('tipoFilter').value = '';
            document.getElementById('turnoFilter').value = '';
            document.getElementById('canalFilter').value = '';
            document.getElementById('pagamentoFilter').value = '';
            document.getElementById('dataInicial').value = '';
            document.getElementById('dataFinal').value = '';
            
            applyFilters();
        }

        // Função para mostrar estatísticas
        async function showStatistics() {
            try {
                const { data: stats, error } = await supabaseClient
                    .from('estatisticas_excel')
                    .select('*')
                    .single();
                
                if (error) throw error;
                
                alert(`📊 Estatísticas do Sistema:\n\n` +
                      `📋 Total de registros: ${stats.total_registros}\n` +
                      `🚫 Registros sem loja: ${stats.registros_sem_loja}\n` +
                      `👥 Registros sem consumidor: ${stats.registros_sem_consumidor}\n` +
                      `✅ Registros ativos: ${stats.registros_ativos}\n` +
                      `💰 Faturamento total: R$ ${stats.faturamento_total?.toFixed(2) || '0,00'}\n` +
                      `🎯 Ticket médio: R$ ${stats.ticket_medio?.toFixed(2) || '0,00'}\n` +
                      `🏢 Total de unidades: ${stats.total_unidades}\n` +
                      `📋 Total de tipos: ${stats.total_tipos}\n` +
                      `📱 Total de canais: ${stats.total_canais}\n` +
                      `👥 Consumidores únicos: ${stats.consumidores_unicos}`);
                
            } catch (error) {
                console.error('Erro ao carregar estatísticas:', error);
                alert('Erro ao carregar estatísticas: ' + error.message);
            }
        }

        // Funções da aba configurações
        function showDatabaseInfo() {
            alert(`🗄️ Informações do Banco de Dados:\n\n` +
                  `📊 URL: ${SUPABASE_URL}\n` +
                  `📋 Tabela: maestro_vendas_excel\n` +
                  `✅ Registros válidos: ${allData.length}\n` +
                  `🔍 Registros filtrados: ${filteredData.length}\n` +
                  `📅 Último carregamento: ${new Date().toLocaleString('pt-BR')}`);
        }

        async function clearAllData() {
            if (!confirm('⚠️ ATENÇÃO: Isso irá remover TODOS os dados do banco. Confirma?')) {
                return;
            }
            
            try {
                const { error } = await supabaseClient
                    .from('maestro_vendas_excel')
                    .delete()
                    .neq('id', 0); // Deletar todos
                
                if (error) throw error;
                
                alert('✅ Todos os dados foram removidos com sucesso!');
                await loadData();
                
            } catch (error) {
                console.error('Erro ao limpar dados:', error);
                alert('Erro ao limpar dados: ' + error.message);
            }
        }

        function exportData() {
            if (filteredData.length === 0) {
                alert('Nenhum dado para exportar');
                return;
            }
            
            // Converter para CSV
            const headers = ['Data', 'Loja', 'Consumidor', 'Tipo', 'Canal', 'Total', 'Cupom'];
            const csvContent = [
                headers.join(','),
                ...filteredData.map(record => [
                    new Date(record.data_venda).toLocaleDateString('pt-BR'),
                    record.loja || '',
                    record.consumidor || '',
                    record.tipo || '',
                    record.canal || '',
                    record.total || 0,
                    record.cupom || 'N'
                ].join(','))
            ].join('\n');
            
            // Download
            const blob = new Blob([csvContent], { type: 'text/csv' });
            const url = window.URL.createObjectURL(blob);
            const a = document.createElement('a');
            a.href = url;
            a.download = `maestro_food_export_${new Date().toISOString().split('T')[0]}.csv`;
            a.click();
            window.URL.revokeObjectURL(url);
        }

        function downloadTemplate() {
            // Criar template Excel básico
            const templateData = [
                ['Unidade', 'Pedido', 'Codigo', 'loja', 'Tipo', 'Turno', 'Canal', 'Número do pedido no parceiro', 'Data', 'Consumidor', 'Cupom', 'Pagamento', 'Cancelado', 'Motivo do cancelamento', 'Itens', 'Entrega', 'Entregador', 'Entregador.1', 'Bairro', 'CEP', 'Acrescimo', 'Motivo de acréscimo', 'Desconto', 'Motivo do desconto', 'Total', 'taxa de serviço'],
                ['Uni.Exemplo', 1, 'uuid-exemplo', 'Loja Exemplo', 'D', 'Dia', 'iFood', 12345, '19/04/2023 10:00', 'Cliente Exemplo', 'N', 'Pago Online', 'N', '', 25.50, 3.99, 1, 'Entregador Exemplo', 'Bairro Exemplo', '12345-678', 0, '', 0, '', 29.49, 0]
            ];
            
            const ws = XLSX.utils.aoa_to_sheet(templateData);
            const wb = XLSX.utils.book_new();
            XLSX.utils.book_append_sheet(wb, ws, 'Template');
            XLSX.writeFile(wb, 'template_maestro_food.xlsx');
        }

        function downloadTemplateCSV() {
            const templateCSV = [
                'Unidade;Pedido;Codigo;loja;Tipo;Turno;Canal;Número do pedido no parceiro;Data;Consumidor;Cupom;Pagamento;Cancelado;Motivo do cancelamento;Itens;Entrega;Entregador;Entregador.1;Bairro;CEP;Acrescimo;Motivo de acréscimo;Desconto;Motivo do desconto;Total;taxa de serviço',
                'Uni.Exemplo;1;uuid-exemplo;Loja Exemplo;D;Dia;iFood;12345;19/04/2023 10:00;Cliente Exemplo;N;Pago Online;N;;25.50;3.99;1;Entregador Exemplo;Bairro Exemplo;12345-678;0;;0;;29.49;0'
            ].join('\n');
            
            const blob = new Blob([templateCSV], { type: 'text/csv' });
            const url = window.URL.createObjectURL(blob);
            const a = document.createElement('a');
            a.href = url;
            a.download = 'template_maestro_food.csv';
            a.click();
            window.URL.revokeObjectURL(url);
        }

        function showDebugInfo() {
            console.log('🔧 Informações de Debug:');
            console.log('URL Supabase:', SUPABASE_URL);
            console.log('Tabela:', 'maestro_vendas_excel');
            console.log('Total de registros válidos:', allData.length);
            console.log('Registros após filtros:', filteredData.length);
            console.log('Arquivo carregado:', uploadedFile?.name || 'Nenhum');
            console.log('Dados parseados:', parsedData?.length || 0);
            console.log('Amostra de dados:', allData.slice(0, 3));
            
            alert('🔧 Informações de debug enviadas para o console (F12)');
        }
    </script>
</body>
</html>

